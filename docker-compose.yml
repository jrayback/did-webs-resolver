x-healthcheck: &healthcheck
  interval: 3s
  timeout: 3s
  retries: 5
  start_period: 2s
x-python-envs: &python-envs
  PYTHONUNBUFFERED: 1 # Ensure output is logged in real-time
  PYTHONIOENCODING: UTF-8 # Ensure consistent logging encoding
  PYTHONWARNINGS: ignore::SyntaxWarning # Ignore regular expression syntax warning

volumes:
    witness_keystore:
    controller_keystore:
    static_host_keystore:
    resolver_keystore:
    dws_shell_keystore:

services:
    # Witnesses used for the AID controller
    witnesses:
        image: gleif/keri:1.2.8
        container_name: witnesses
        hostname: witnesses
        platform: linux/amd64
        volumes:
            - ./docker/config/witnesses/keri/cf/main/:/keripy/scripts/keri/cf/main/
            - witness_keystore:/usr/local/var/keri
        healthcheck:
            # healthcheck needs to be different in 1.2.6+ because it uses the Alpine base image and curl is not present
            test: [ "CMD", "wget", "--spider", "--tries=1", "--no-verbose", "http://127.0.0.1:5642/oobi" ]
            <<: *healthcheck
        stop_grace_period: 1s
        environment:
            <<: *python-envs
        ports:
            - "5642:5642"  # witness Wan
            - "5643:5643"  # witness Wil
            - "5644:5644"  # witness Wes
        entrypoint: kli witness demo --loglevel INFO

    # Generates did.json and keri.cesr files
    artifact-generator:
        image: gleif/dws-base:latest
        container_name: gen
        hostname: gen
        environment:
            <<: *python-envs
        depends_on:
            witnesses:
                condition: service_healthy
        build:
            context: .
            dockerfile: images/dws-base.dockerfile
        stop_grace_period: 1s
        volumes:
            - ./docker/config/controller:/dws/config/controller
            - ./docker/scripts:/dws/scripts
            - ./docker/artifacts:/dws/web/dws
            - ./docker/controller-init.sh:/dws/controller-init.sh
            - controller_keystore:/usr/local/var/keri
        entrypoint: /dws/controller-init.sh

    # Hosts the did.json and keri.cesr files on behalf of the AID controller dws-controller
    dws-static-service:
        image: gleif/did-webs-resolver-service:latest
        container_name: dws-static-server
        hostname: dws-static-server
        environment:
            <<: *python-envs
            DEBUG_DKR: true
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://127.0.0.1:7679/health" ]
            <<: *healthcheck
        depends_on:
            witnesses:
                condition: service_healthy
            artifact-generator:
                condition: service_completed_successfully
        build:
            context: .
            dockerfile: images/dws-static-service.dockerfile
        stop_grace_period: 1s
        ports:
            - "7679:7679"
        volumes:
            - ./docker/config/controller:/dws/config/controller
            - ./docker/scripts:/dws/scripts
            - ./docker/artifacts:/dws/web/dws
            - static_host_keystore:/usr/local/var/keri
        entrypoint: [
            "dkr", "did", "webs", "resolver-service",
            "--http", "7679",
            "--name", "static-host-keystore",
            "--config-dir", "/dws/config/controller",
            "--config-file", "static-host-keystore",
            "--static-files-dir", "/dws/web",
            "--did-path", "dws",
            "--loglevel", "INFO"
        ]

    dws-dynamic-service:
        image: gleif/did-webs-service:latest
        container_name: dws-service
        hostname: dws-service
        build:
            context: .
            dockerfile: images/dws-dynamic-service.dockerfile
        stop_grace_period: 1s
        environment:
            <<: *python-envs
        depends_on:
            witnesses:
                condition: service_healthy
            artifact-generator:
                condition: service_completed_successfully
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://127.0.0.1:7680/health" ]
            <<: *healthcheck
        ports:
            - "7680:7680"
        volumes:
            - ./docker/scripts:/dkr/scripts
            - ./docker/dws:/dkr/web/dws
            - controller_keystore:/usr/local/var/keri
        entrypoint: [
            "dkr", "did", "webs", "service",
            "--http", "7680",
            "--name", "my-keystore",
            "--alias", "my-controller",
            "--config-dir", "/dws/config/controller",
            "--config-file", "my-keystore",
            "--did-path", "dws",
            "--loglevel", "INFO"
        ]

    # Main resolver service that can hit either of the static or dynamic did:webs artifact hosts
    dws-resolver:
        image: gleif/did-webs-resolver-service:latest
        container_name: dws-resolver
        hostname: dws-resolver
        environment:
            <<: *python-envs
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://127.0.0.1:7677/health" ]
            <<: *healthcheck
        depends_on:
            witnesses:
                condition: service_healthy
            artifact-generator:
                condition: service_completed_successfully
            dws-static-service:
                condition: service_healthy
            dws-dynamic-service:
                condition: service_healthy
        build:
            context: .
            dockerfile: images/dws-resolver-service.dockerfile
        stop_grace_period: 1s
        ports:
            - "7677:7677"
        volumes:
            - ./docker/config/controller:/dws/config/controller
            - ./docker/resolver-init.sh:/dws/resolver-init.sh
            - resolver_keystore:/usr/local/var/keri
        entrypoint: /dws/resolver-init.sh

    resolver-test:
        image: gleif/dws-base:latest # depends on dws-base built above
        container_name: resolver-test
        hostname: resolver-test
        environment:
            <<: *python-envs
        depends_on:
            witnesses:
                condition: service_healthy
            artifact-generator:
                condition: service_completed_successfully
            dws-static-service:
                condition: service_healthy
            dws-resolver:
                condition: service_healthy
        stop_grace_period: 1s
        volumes:
            - ./docker/config/controller:/dws/config/controller
            - ./docker/scripts:/dws/scripts
            - ./docker/artifacts:/dws/web/dws
            - ./docker/test-resolutions.sh:/dws/test-resolutions.sh
            - dws_shell_keystore:/usr/local/var/keri
        entrypoint: /dws/test-resolutions.sh

    # Shell for debugging and manual operations
    dws-shell:
        image: gleif/dws-base:latest # depends on dws-base built above
        container_name: dws-shell
        hostname: dws-shell
        environment:
            <<: *python-envs
        depends_on:
            witnesses:
                condition: service_healthy
            artifact-generator:
                condition: service_completed_successfully
            dws-static-service:
                condition: service_healthy
            dws-dynamic-service:
                condition: service_healthy
            dws-resolver:
                condition: service_healthy
            resolver-test:
                condition: service_completed_successfully
        stop_grace_period: 1s
        volumes:
            - ./docker/config/controller:/dws/config/controller
            - ./docker/scripts:/dws/scripts
            - ./docker/artifacts:/dws/web/dws
            - dws_shell_keystore:/usr/local/var/keri
        entrypoint: tail -f /dev/null
        tty: true
